{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\abdul\\\\git\\\\cs2001-2020_21-group-36-1\\\\healthchecker\\\\healthchecker-frontend\\\\src\\\\Components\\\\AdminManageAccount.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport './addJob.css';\nimport springlogo from './test.png';\nimport axios from 'axios';\nexport default function AddJob() {\n  _s();\n\n  //Define two states\n  //1. The content entered in the texbox in the form\n  //2. Output to be displayed to the user\n  const [content, setContent] = React.useState(\"\");\n  const [output, setOutput] = React.useState(\"\"); //Arrow function to handle content change\n\n  const handleContentChange = event => setContent(event.target.value);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setOutput(\"Save button pressed.\");\n    axios({\n      method: 'post',\n      url: '/createUser',\n      data: {\n        userName: \"TeSt2\",\n        password: \"test\",\n        roles: \"ROLE_ADMIN\",\n        active: \"true\"\n      }\n    }).then(response => {\n      console.log(response);\n      setOutput(\"Sucess\");\n    }, error => {\n      console.log(error);\n      setOutput(\"Fail\");\n    });\n  }; //ToDo: Arrow function to handle pressing the Analyze button\n\n\n  const handleAnalyze = event => {\n    event.preventDefault();\n    setOutput(\"Analyze button pressed.\");\n    axios({\n      method: 'post',\n      url: '/analyze',\n      data: {\n        \"text\": content\n      }\n    }).then(response => {\n      console.log(response);\n      var output = \"\";\n      var stringResponse = JSON.stringify(response.data);\n      var arrayResponse = stringResponse.split(',');\n      var genderMapResponse = arrayResponse[3].split('');\n      var textResponse = arrayResponse[4]; //Regex to store only the user input text;it duplicates for some reason\n\n      var textDuplicate = textResponse.match(/(?<=\\:\")(.*?)(?=\\\")/); //Slice duplicated text in half\n\n      var textSlice = textDuplicate.slice(0, textDuplicate.length / 2); //Separate words into array\n\n      var textProto = textSlice.toString().split(' '); //Separate array with spaces between elements\n\n      var text = textProto.join(' ');\n      var neutral = -1; //Minus one to account for 'n' in 'genderMap'\n\n      var masculine = 0; //Minus one to account for 'm' in 'genderMap'\n\n      var feminine = 0;\n      var genderMap = []; //Count number of gender-specific words, push corresponding letter to new array \n\n      for (var i = 0; i < genderMapResponse.length; i++) {\n        if (genderMapResponse[i] == \"n\") {\n          neutral = neutral + 1;\n\n          if (neutral > 0) {\n            genderMap.push(\"n\");\n          }\n        }\n\n        if (genderMapResponse[i] == \"m\") {\n          masculine = masculine + 1;\n          genderMap.push(\"m\");\n        }\n\n        if (genderMapResponse[i] == \"f\") {\n          feminine = feminine + 1;\n          genderMap.push(\"f\");\n        }\n      }\n\n      if (feminine + masculine == 0) {\n        output = \"This ad is neutral.\";\n      }\n\n      if (masculine > feminine) {\n        for (var i = 0; i < genderMap.length; i++) {\n          if (genderMap[i] == \"m\") {\n            //highlight text[i] in blue\n            output = \"text is blue\";\n          }\n        }\n      }\n\n      if (feminine > masculine) {\n        for (var i = 0; i < genderMap.length; i++) {\n          if (genderMap[i] == \"f\") {\n            //highlight text[i] in pink\n\n            /*#__PURE__*/\n            _jsxDEV(\"div\", {\n              className: \"f\",\n              children: \"text[i]\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 6\n            }, this);\n          }\n        }\n      }\n\n      setOutput(text);\n    }, error => {\n      console.log(error);\n      setOutput(\"Fail\");\n    }); //ToDo:\n    //Need to access the content state\n    //Make a POST request to /analyze with the content\n    //Process the returned result.\n    //If the result.status 200, analyze the returned information.\n    //Else print a failure message.\n    //On success, the server should return: text, countFeminine, count Masculine, genderMap.\n    //If countFeminine and countMasculine are both 0, print: \"This job ad is neutral\"\n    //Else you need to go over the genderMap to decide how to highlight \n    //which word - consider using a map function for this.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: springlogo,\n          alt: \"Equality icon\",\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form\",\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"ad\",\n            name: \"ad\",\n            placeholder: \"Input text here\",\n            onChange: handleContentChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleAnalyze,\n            children: \"Analyze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleSubmit,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddJob, \"sSt7EA8krXHQRP4DLhr/UyT8efE=\");\n\n_c = AddJob;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddJob\");","map":{"version":3,"sources":["C:/Users/abdul/git/cs2001-2020_21-group-36-1/healthchecker/healthchecker-frontend/src/Components/AdminManageAccount.js"],"names":["React","springlogo","axios","AddJob","content","setContent","useState","output","setOutput","handleContentChange","event","target","value","handleSubmit","preventDefault","method","url","data","userName","password","roles","active","then","response","console","log","error","handleAnalyze","stringResponse","JSON","stringify","arrayResponse","split","genderMapResponse","textResponse","textDuplicate","match","textSlice","slice","length","textProto","toString","text","join","neutral","masculine","feminine","genderMap","i","push"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport './addJob.css';\r\nimport springlogo from './test.png'\r\nimport axios from 'axios';\r\n\r\nexport default function AddJob() {\r\n  //Define two states\r\n  //1. The content entered in the texbox in the form\r\n  //2. Output to be displayed to the user\r\n  const [content, setContent] = React.useState(\"\");\r\n  const [output, setOutput] = React.useState(\"\");\r\n\r\n  //Arrow function to handle content change\r\n  const handleContentChange = event => setContent(event.target.value);\r\n\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    setOutput(\"Save button pressed.\")\r\n\t\r\n\t\r\n    axios({\r\n      method: 'post',\r\n      url: '/createUser',\r\n\t  data: {\r\n\t\t  userName: \"TeSt2\",password: \"test\",roles: \"ROLE_ADMIN\",active: \"true\"\r\n\t  }\r\n    })\r\n\t.then((response) => {\r\n\t\tconsole.log(response);\r\n\t\tsetOutput(\"Sucess\");\r\n\t}, (error) => {\r\n\t\tconsole.log(error);\r\n\t\tsetOutput(\"Fail\");\r\n\t});\r\n\t\r\n  };\r\n\r\n  //ToDo: Arrow function to handle pressing the Analyze button\r\n  const handleAnalyze = event => {\r\n    event.preventDefault();\r\n    setOutput(\"Analyze button pressed.\");\r\n    \r\n\taxios({\r\n      method: 'post',\r\n      url: '/analyze',\r\n\t  data: {\r\n\t\t  \"text\":content\r\n\t  }\r\n    })\r\n\t.then((response) => {\r\n\t\tconsole.log(response);\r\n\t\t\r\n\t\tvar output = \"\"\r\n\t\tvar stringResponse = JSON.stringify(response.data)\r\n\t\tvar arrayResponse = stringResponse.split(',');\r\n\t\t\r\n\t\tvar genderMapResponse = arrayResponse[3].split('');\r\n\t\tvar textResponse = arrayResponse[4]\r\n\t\t\r\n\t\t//Regex to store only the user input text;it duplicates for some reason\r\n\t\tvar textDuplicate = textResponse.match(/(?<=\\:\")(.*?)(?=\\\")/);\r\n\t\t//Slice duplicated text in half\r\n\t\tvar textSlice = textDuplicate.slice(0,textDuplicate.length/2);\r\n\t\t//Separate words into array\r\n\t\tvar textProto = (textSlice.toString()).split(' ');\r\n\t\t//Separate array with spaces between elements\r\n\t\tvar text = textProto.join(' ');\r\n\t\t\r\n\t\tvar neutral = -1 //Minus one to account for 'n' in 'genderMap'\r\n\t\tvar masculine = 0 //Minus one to account for 'm' in 'genderMap'\r\n\t\tvar feminine = 0 \r\n\t\t\r\n\t\tvar genderMap = [];\r\n\t\t\r\n\t\t//Count number of gender-specific words, push corresponding letter to new array \r\n\t\tfor (var i=0; i<genderMapResponse.length;i++) \r\n\t\t{\r\n\t\t\tif (genderMapResponse[i] == \"n\") \r\n\t\t\t{\r\n\t\t\t\tneutral = neutral + 1;\r\n\t\t\t\tif(neutral>0)\r\n\t\t\t\t{\r\n\t\t\t\t\tgenderMap.push(\"n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (genderMapResponse[i] == \"m\") \r\n\t\t\t{\r\n\t\t\t\tmasculine = masculine + 1;\r\n\t\t\t\tgenderMap.push(\"m\");\r\n\t\t\t}\r\n\t\t\tif (genderMapResponse[i] == \"f\") \r\n\t\t\t{\r\n\t\t\t\tfeminine = feminine + 1;\r\n\t\t\t\tgenderMap.push(\"f\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(feminine+masculine==0)\r\n\t\t{\r\n\t\t\toutput = \"This ad is neutral.\";\r\n\t\t}\r\n\t\t\r\n\t\tif(masculine>feminine)\r\n\t\t{\r\n\t\t\tfor (var i=0; i<genderMap.length;i++) \r\n\t\t\t{\r\n\t\t\t\tif (genderMap[i]==\"m\")\r\n\t\t\t\t{\r\n\t\t\t\t\t//highlight text[i] in blue\r\n\t\t\t\t\toutput = \"text is blue\";\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\r\n\t\tif(feminine>masculine)\r\n\t\t{\r\n\t\t\tfor (var i=0; i<genderMap.length;i++) \r\n\t\t\t{\r\n\t\t\t\tif (genderMap[i]==\"f\")\r\n\t\t\t\t{\r\n\t\t\t\t\t//highlight text[i] in pink\r\n\t\t\t\t\t<div className=\"f\">text[i]</div>\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\r\n\t\t\r\n\t\tsetOutput(text);\r\n\t}, (error) => {\r\n\t\tconsole.log(error);\r\n\t\tsetOutput(\"Fail\");\r\n\t});\r\n\t\r\n\t//ToDo:\r\n    //Need to access the content state\r\n    //Make a POST request to /analyze with the content\r\n    //Process the returned result.\r\n    //If the result.status 200, analyze the returned information.\r\n    //Else print a failure message.\r\n    //On success, the server should return: text, countFeminine, count Masculine, genderMap.\r\n    //If countFeminine and countMasculine are both 0, print: \"This job ad is neutral\"\r\n    //Else you need to go over the genderMap to decide how to highlight \r\n    //which word - consider using a map function for this.\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n          <img src={springlogo} alt=\"Equality icon\" className=\"icon\" />\r\n        </div>\r\n        <div className=\"box\">\r\n          <form className=\"form\" noValidate>\r\n            <textarea id=\"ad\" name=\"ad\"\r\n              placeholder=\"Input text here\"\r\n              onChange={handleContentChange} />\r\n            <button className=\"button\" onClick={handleAnalyze}>\r\n              Analyze\r\n              </button>\r\n            <button className=\"button\" onClick={handleSubmit}>\r\n              Save\r\n              </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"box\">\r\n          <p>{output}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}